alias currentPID R2;
alias functionNum R1;
alias userSP R3;
alias childPID R4;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 9] = 8;
userSP = SP;
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 - 1;
multipush(R2,R3);
functionNum = 1;
call MOD_1;
if(R0 == -1)then
	multipush(R0);
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
	ireturn;
else
	childPID = R0;
endif;
multipop(R2,R3);
alias ptbr R6;
ptbr = [PROCESS_TABLE + childPID * 16 + 14];
multipush(R2,R3,R4);
if( [ptbr + 4] == -1 ) then
	R1 = 1;
	call MOD_2;
	[ptbr + 4] = R0;
	[ptbr + 5] = "1110";
	R1 = 1;
	call MOD_2;
	[ptbr + 6] = R0;
	[ptbr + 7] = "1110";
endif;
multipop(R2,R3,R4);
ptbr = [PROCESS_TABLE + childPID * 16 + 14] ;
multipush(R2,R3,R4);
R1 = 1;
R2 = childPID;
call MOD_2;
[ptbr + 16] = R0;
[ptbr + 17] = "0110";

R1 = 1;
R2 = childPID;
call MOD_2;
[ptbr + 18] = R0;
[ptbr + 19] = "0110";

R1 = 1;
R2 = childPID;
call MOD_2;
multipop(R2,R3,R4);
alias child R8;
alias parent R9;
child = PROCESS_TABLE + childPID * 16;
parent = PROCESS_TABLE + currentPID * 16;
[child + 11] = R0;
[child + 3] = [parent + 3];
[child + 6] = [parent + 6];
[child + 7] = [parent + 7];
[child + 10] = [parent + 10];
[child + 13] = [parent + 13];

[child] = 0;
[child + 9] = 0;
[child + 12] = 0;

[child + 2] = [parent + 1];
[child + 4] = CREATED;

alias counter R5;
counter = 2;
while(counter<10) do
	[DISK_MAP_TABLE + childPID * 10 + counter] = [DISK_MAP_TABLE + currentPID * 10 + counter];
	counter = counter + 1;
endwhile;
alias res_p R6;
alias res_c R7;
res_p = [parent + 11] * 512 + 496;
res_c = [child + 11] * 512 + 496;
counter = 0;
while(counter < 8) do
	res_c = res_c + 2;
	res_p = res_p + 2;
	[res_c] = [res_p];
	[res_c + 1] = [res_p + 1];
	if([res_c]== 0)then
		[SEMAPHORE_TABLE + 4 * [res_c + 1] + 1] = [SEMAPHORE_TABLE + 4 * [res_c + 1] + 1] + 1;
	endif; 
	counter = counter + 1;
endwhile;
alias ptbr_p R6;
alias ptbr_c R7;
ptbr_c = [child + 14];
ptbr_p = [parent + 14];

counter = 0;
while(counter < 8) do
	[ptbr_c + 2 * counter] = [ptbr_p + 2 * counter];
	[ptbr_c + 2 * counter + 1] = [ptbr_p + 2 * counter + 1];
	[MEMORY_FREE_LIST + [ptbr_c + 2 * counter]] = [MEMORY_FREE_LIST + [ptbr_c + 2 * counter]] + 1; 
	counter = counter + 1;
endwhile;
alias stack_p R6;
alias stack_c R7;
stack_p = [[parent + 14] + 16] * 512;
stack_c = [[child + 14] + 16] * 512;
counter = 0;
while(counter < 512) do
	[stack_c + counter] = [stack_p + counter];
	counter = counter + 1;
endwhile;
stack_p = [[parent + 14] + 18] * 512;
stack_c = [[child + 14] + 18] * 512;
counter = 0;
while(counter < 512) do
	[stack_c + counter] = [stack_p + counter];
	counter = counter + 1;
endwhile;
alias kernel R6;
kernel = [child + 11] * 512 + [child + 12];
[kernel] = BP;
alias br R6;
br = [parent+ 14];
userSP = [parent + 13];
alias physicalAddrRetVal R5;     
physicalAddrRetVal = ([br + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);     
[physicalAddrRetVal] = [child + 1];
br = [child + 14];
userSP = [child + 13];     
physicalAddrRetVal = ([br + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);     
[physicalAddrRetVal] = 0;
[parent + 9] = 0;
SP = userSP;
ireturn;
