alias userSP R6;
userSP = SP;
alias functionNum R1;
functionNum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 -1;
alias retval R3;
retval = ([PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512);
if(functionNum==17)then
	[PROCESS_TABLE + currentPID * 16 + 9] = 17;
	alias counter R4;
	counter = 0; 
	alias resource R5;
	resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 512 -16;
	while(counter < 8) do
		if([resource + 2 * counter + 1] == -1) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if(counter == 8)then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	multipush(R1,R2,R3,R4,R5,R6);
	functionNum = 6;
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6);
	if(R0 == -1)then
		[retval] = -2;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	[resource + 2 * counter] = SEMAPHORE;
	[resource + 2 * counter + 1] = R0;
	[retval] = counter;
	SP = userSP;
	[PROCESS_TABLE + currentPID * 16 + 9] = 0;
	ireturn;
else
	[PROCESS_TABLE + currentPID * 16 + 9] = 18;
	alias semid R4;
	semid = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
	alias resource R5;
	resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 512 -16;
	if(semid > 7 || semid < 0 || [resource + semid*2 ] !=1 )then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	multipush(R1,R2,R3,R4,R5,R6);
	functionNum = 7;
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	R3 = semid;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6);
	[resource + 2 * semid] = -1;
	[resource + 2 * semid + 1] = -1;
	[retval] = 0;
	SP = userSP;
	[PROCESS_TABLE + currentPID * 16 + 9] = 0;
	ireturn;
endif;
