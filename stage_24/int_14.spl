alias counter R7;
alias userSP R6;
userSP = SP;
alias functionNum R1;
functionNum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 -1;
alias retval R3;
retval = ([PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512);
if(functionNum==19)then
	[PROCESS_TABLE + currentPID * 16 + 9] = 19;
	alias semid R4;
	semid = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
	alias resource R5;
	resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 512 -16;
	counter = 0;
	while(counter < 8)do
		if([resource + 2*counter ] == 1 && ([resource + 2*counter + 1]==semid || [resource + 2*counter + 1]==-1))then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if(semid > 31 || semid < 0 || counter==8 )then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	while([SEMAPHORE_TABLE + semid * 4]!= -1 && [SEMAPHORE_TABLE + semid * 4]!= currentPID)do
		[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + currentPID * 16 + 5] = semid;
		multipush(R1,R2,R3,R4);	
		call MOD_5;
		multipop(R1,R2,R3,R4);	
	endwhile;
	[SEMAPHORE_TABLE + semid * 2] = currentPID;
	[retval] = 0;
	SP = userSP;
	[PROCESS_TABLE + currentPID * 16 + 9] = 0;
	ireturn;
endif;
if(functionNum==20)then
	[PROCESS_TABLE + currentPID * 16 + 9] = 20;
	alias semid R4;
	semid = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
	alias resource R5;
	resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 512 -16;
	counter = 0;
	while(counter < 8)do
		if([resource + 2*counter ] == 1 && ([resource + 2*counter + 1]==semid || [resource + 2*counter + 1]==-1))then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if(semid > 31 || semid < 0 || counter==8 )then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	if([SEMAPHORE_TABLE + 4 * semid]!=-1) then
		if([SEMAPHORE_TABLE + 4 * semid]!=currentPID) then
			[retval] = -2;
			SP = userSP;
			[PROCESS_TABLE + currentPID * 16 + 9] = 0;
			ireturn;
		endif;
		[SEMAPHORE_TABLE + 4 * semid]=-1;
		counter = 1;
		while(counter < 16) do
			if([PROCESS_TABLE + 16 * counter + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + 16 * counter + 5]==semid)then
				[PROCESS_TABLE + 16 * counter + 4] = READY;
				[PROCESS_TABLE + 16 * counter + 5] = -1;
			endif;
			counter = counter + 1;
		endwhile;	
	endif;
	[retval] = 0;
	SP = userSP;
	[PROCESS_TABLE + currentPID * 16 + 9] = 0;
	ireturn;
endif;
