[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R6;
userSP = SP;
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 - 1;
alias retval R3;
retval = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
alias filedescriptor R4;
filedescriptor = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
if( filedescriptor == -1) then	
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	multipush(R2,R3,R4,R5,R6);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call MOD_4;
	multipop(R2,R3,R4,R5,R6);
else
	if(filedescriptor > 8 || filedescriptor< 0)then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias resource R10;
	resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 496;
	if([resource + 2 * filedescriptor] != FILE)then		 
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias openfile R8;
	openfile =[resource + 2 * filedescriptor + 1];
	alias inode R7;
	inode = [OPEN_FILE_TABLE + 4 * openfile];
	multipush(R2,R3,R4,R5,R6,R7,R8,R10);
 	R1 = 4;
 	R3 = inode;
 	call MOD_0; 
 	multipop(R2,R3,R4,R5,R6,R7,R8,R10);
	if(R0 == -1)then
		multipush(R2,R3,R4,R5,R6,R7,R8,R10);
		R1 = 5;
 		R3 = inode;
 		call MOD_0; 
		multipop(R2,R3,R4,R5,R6,R7,R8,R10);
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias buffer R5;
	resource = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];
	buffer = ([PTBR + 2 * (resource / 512)] * 512 + resource % 512);
	alias lseek R9;
	lseek = (OPEN_FILE_TABLE + 4 * openfile + 2); 
	if(inode == INODE_ROOT)then
		if( [lseek] == 480)then
			multipush(R2,R3,R4,R5,R6,R7,R8);
			R1 = 5;
 			R3 = inode;
 			call MOD_0; 
 			multipop(R2,R3,R4,R5,R6,R7,R8);
			[retval] = -2;
			SP = userSP;
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			ireturn;
		endif;
		[buffer]=[ROOT_FILE + [lseek]];
		[lseek] = [lseek] + 1;
	else
		if([lseek]==[INODE_TABLE + 16 * inode + 2])then
			multipush(R2,R3,R4,R5,R6,R7,R8);
			R1 = 5;
	 		R3 = inode;
 			call MOD_0; 
 			multipop(R2,R3,R4,R5,R6,R7,R8);
			[retval] = -2;
			SP = userSP;
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			ireturn;
		endif;
		alias block R10;
		block = [INODE_TABLE + inode * 16 + 8 + ([lseek]/512)];
		multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = 2;
	 	R3 = block;
	 	R4 = [lseek] % 512;
	 	R5 = buffer;
 		call MOD_3; 
 		multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
		[lseek] = [lseek] + 1;
		multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = 5;
	 	R3 = inode;
 		call MOD_0; 
 		multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
		[retval] = 0;
	endif;
endif;
SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;			
ireturn;
