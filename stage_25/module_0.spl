alias functionNum R1;
alias currentPID R2;
alias buffer R3;
if(functionNum == 1) then
	while( [BUFFER_TABLE + 4*buffer + 2]!=currentPID && [BUFFER_TABLE + 4*buffer + 2]!=-1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 5] = buffer;
		multipush(R1,R2,R3);
		call MOD_5;
		multipop(R1,R2,R3);
	endwhile;
	[BUFFER_TABLE + 4*buffer + 2]=currentPID;
	return;
endif;
if(functionNum == 2) then
	if([BUFFER_TABLE + 4*buffer + 2]!=currentPID) then
		R0 = -1;
		return;
	endif;
	[BUFFER_TABLE + 4*buffer + 2]=-1;
		alias counter R4;
	counter = 0;
	while(counter<16)do
		if([PROCESS_TABLE + counter * 16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + counter * 16 + 5] == buffer)then
			[PROCESS_TABLE + counter * 16 + 4] = READY;
			[PROCESS_TABLE + counter * 16 + 5] = -1;
		endif;
		counter = counter + 1;
	endwhile;
	R0 = 0;
	return;
endif;
if(functionNum == 3) then
	while([DISK_STATUS_TABLE]==1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_DISK;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	return;
endif;
alias inode_index R3;
if(functionNum == 4) then
	while([FILE_STATUS_TABLE + 4 * inode_index ]!=-1 && [FILE_STATUS_TABLE + 4 * inode_index ]!=currentPID) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_FILE;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 5] = inode_index;
		multipush(R1,R2,R3);
		call MOD_5;
		multipop(R1,R2,R3);
	endwhile;
	if([INODE_TABLE + 16 * inode_index + 1] == -1)then
		R0 = -1;
		return;
	endif;
	[FILE_STATUS_TABLE + 4 * inode_index] = currentPID;
	R0 = 0;
	return;
endif;
if(functionNum == 5) then
	if([FILE_STATUS_TABLE + 4 * inode_index ]!=currentPID) then
		R0 = -1;
		return;
	endif;
	[FILE_STATUS_TABLE + 4 * inode_index] = -1;
	alias counter R4;
	counter = 0;
	while(counter<16)do
		if([PROCESS_TABLE + counter * 16 + 4] == WAIT_FILE && [PROCESS_TABLE + counter * 16 + 5] == inode_index)then
			[PROCESS_TABLE + counter * 16 + 4] = READY;
			[PROCESS_TABLE + counter * 16 + 5] = -1;
		endif;
		counter = counter + 1;
	endwhile;
	R0 = 0;
	return;
endif;
if(functionNum == 6) then
	alias counter R3;
	counter = 0;
	while(counter < 32)do
		if([SEMAPHORE_TABLE + counter * 32 + 1] == 0)then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if(counter == 32)then
		R0 = -1;
		return;
	endif;
	[SEMAPHORE_TABLE + counter * 32 + 1] = 1;
	[SEMAPHORE_TABLE + counter * 32 ] = -1;
	R0 = counter;
	return;
endif;
if(functionNum == 7) then
	alias semid R3;
	alias counter R4;
	if([SEMAPHORE_TABLE + semid*4]==currentPID)then
		[SEMAPHORE_TABLE + semid*4] = -1;
		counter = 1;
		while(counter < 16) do
			if([PROCESS_TABLE + 16 * counter + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + 16 * counter + 5]==semid)then
				[PROCESS_TABLE + 16 * counter + 4] = READY;
				[PROCESS_TABLE + 16 * counter + 5] = -1;
			endif;
			counter = counter + 1;
		endwhile;	
	endif;
	[SEMAPHORE_TABLE + semid * 4 + 1] = [SEMAPHORE_TABLE + semid * 4 + 1] - 1;
	return;
endif; 
if(functionNum == 8) then
	while(TERMINAL_STATUS_TABLE == 1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_TERMINAL;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;
if(functionNum == 9) then
	if ( currentPID == [TERMINAL_STATUS_TABLE+1] ) then
		R0 = -1;
	else
		[TERMINAL_STATUS_TABLE] = 0;
		alias counter R3;
		counter = 1;
		while(counter<16) do
			if([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
				[PROCESS_TABLE + counter*16 + 4] = READY;
			endif;
			counter = counter + 1;
		endwhile;
		R0 = 0;
	endif;
endif; 
return;
