alias userSP R6;
userSP = SP;
alias functionNum R1;
functionNum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 -1;
alias retval R3;
retval = ([PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512);
alias filename R4;
filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
alias resource R5;
resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 496;
alias counter R7;
alias flag R8;	
if(functionNum == 3)then
 	alias filedescriptor R4; 
 	[PROCESS_TABLE + currentPID * 16 + 9] = 3;
 	if(filedescriptor<0 || filedescriptor>8) then
 		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn; 
	endif;
 	if([resource + filedescriptor*2] != FILE)then
 		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1=4;
	R3=[resource + filedescriptor*2 + 1];
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	[resource + filedescriptor * 2] = -1;
	[resource + filedescriptor * 2 + 1] = -1;
	[retval] = 0;
endif;
if(functionNum == 6)then
	alias offset R8;
	offset = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];
	alias filedescriptor R4; 
	[PROCESS_TABLE + currentPID * 16 + 9] = 6;
 	if(filedescriptor<0 || filedescriptor>8) then
 		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn; 
	endif;
	if([resource + filedescriptor*2] != FILE)then
 		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	alias openfile R9;
	openfile =[resource + 2 * filedescriptor + 1];
	alias inode R10;
	inode = [OPEN_FILE_TABLE + 4 * openfile];
	if([PROCESS_TABLE + 16 * currentPID + 3] !=1 || ([PROCESS_TABLE + 16 * currentPID + 3] !=[INODE_TABLE + 16 *inode + 4] && [INODE_TABLE + 16 *inode + 5]==EXCLUSIVE))then
		[retval] = -3;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
 	R1 = 4;
 	R3 = inode;
 	call MOD_0; 
 	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	if(R0 == -1)then
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	 	R1 = 5;
 		R3 = inode;
 		call MOD_0; 
 		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias lseek R5;
	lseek = (OPEN_FILE_TABLE + 4 * openfile + 2); 
	alias filesize R7;
	filesize = [INODE_TABLE + inode * 16 + 2];
	if([lseek] + offset < 0)then
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	 	R1 = 5;
 		R3 = inode;
 		call MOD_0; 
 		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		breakpoint;
		[retval] = -2;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	if(offset == 0) then
		[lseek] = 0;
	else	
		if([lseek] + offset > filesize) then
			[lseek] = filesize;
		else
			[lseek] = [lseek] + offset;
		endif;
	endif;
	multipush(R1,R2,R3,R6);
	R1 = 5;
 	R3 = inode;
 	call MOD_0; 
 	multipop(R1,R2,R3,R6);
	[retval] = 0;
endif;
if(functionNum==2)then
	[PROCESS_TABLE + currentPID * 16 + 9] = 2;
	counter = 0;
	flag=-1;
	while(counter<8)do
		if([resource + counter*2] == -1)then
			flag=counter;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if(flag==-1)then
		[retval] = -3;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1=3;
	R3=filename;
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	if(R0==-1 || R0==-2)then
		[retval] = R0;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	[resource + flag * 2] = FILE;
	[resource + flag * 2 + 1] = R0;
	[retval] = flag;
endif;
SP = userSP;
[PROCESS_TABLE + currentPID * 16 + 9] = 0;
ireturn;
