alias userSP R6;
userSP = SP;
alias functionNum R1;
functionNum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 -1;
alias retval R3;
retval = ([PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512);
alias filename R4;
filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
alias counter R7;
alias flag R8;
if(functionNum==1)then
	[PROCESS_TABLE + currentPID * 16 + 9] = 1;
	alias permission R5;
	permission = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];
	counter = 0;
	while(counter<60)do
		if([INODE_TABLE + counter*16 + 1] == filename)then
			[retval] = 0;
			SP = userSP;
			[PROCESS_TABLE + currentPID * 16 + 9] = 0;
			ireturn;
		endif;
		counter = counter + 1;
	endwhile;
	counter = 0;
	flag = -1;
	while(counter<60)do
		if([INODE_TABLE + counter*16 + 1] == -1)then
			flag = counter;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if(flag==-1)then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	alias inode_entry R7;
	inode_entry = INODE_TABLE + flag*16;
	[inode_entry] = DATA;
	[inode_entry + 1] = filename;
	[inode_entry + 2] = 0;
	[inode_entry + 3] = [PROCESS_TABLE + currentPID * 16 + 3];
	[inode_entry + 4] = permission;
	[inode_entry + 8] = -1;
	[inode_entry + 9] = -1;
	[inode_entry + 10] = -1;
	[inode_entry + 11] = -1;
	alias root_entry R7;
	root_entry = ROOT_FILE + flag*8;
	[root_entry ] = filename;
	[root_entry + 1] = 0;
	[root_entry + 2] = DATA;
	[root_entry + 3] = [PROCESS_TABLE + currentPID * 16 + 3];
	[root_entry + 4] = permission;
	[retval] = 0;
	SP = userSP;
	[PROCESS_TABLE + currentPID * 16 + 9] = 0;
	ireturn;
endif;
if(functionNum == 4)then
 	[PROCESS_TABLE + currentPID * 16 + 9] = 1;
 	counter = 0;
 	flag = -1;
 	while(counter <60 ) do
 		if([INODE_TABLE + counter*16 + 1] == filename)then
 			flag=counter;
 			break;
 		endif;
 		counter = counter + 1;
 	endwhile;
 	if(flag == -1)then
 		[retval] = 0;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	alias inode_entry R9;
	inode_entry = INODE_TABLE + 16 *flag;
 	if([inode_entry] != DATA)then
 		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
 	if([inode_entry + 4] == 0 && [inode_entry + 3]!=[PROCESS_TABLE + currentPID * 16 + 3])then
 		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
 	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1=4;
	R3=flag;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
 	if([FILE_STATUS_TABLE + flag * 4 + 1]!=-1)then
		multipush(R1,R2,R3,R4,R5,R6,R7,R8);
		R1=5;
		R3=flag;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8);
		[retval] = -2;
		SP = userSP;
		[PROCESS_TABLE + currentPID * 16 + 9] = 0;
		ireturn;
	endif;
	counter = 0;
	while(counter<4)do
		if([INODE_TABLE + flag * 16 + 8 + counter]!=-1)then
			if([BUFFER_TABLE + [inode_entry + 8 + counter] % 4] == [inode_entry + 8 + counter] && [BUFFER_TABLE + [inode_entry + 8 + counter] % 4 + 1] == 1)then
				[BUFFER_TABLE + [inode_entry + 8 + counter] % 4 + 1] = 0;
			endif;
			multipush(R1,R2,R3,R4,R5,R6,R7,R8);
			R1=4;
			R3=[inode_entry + 8 + counter];
			call MOD_2;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8);
		endif;
		counter = counter + 1;
	endwhile;
	counter = 0;
	while(counter < 16)do
		[inode_entry + counter]=-1;
		counter = counter + 1;
	endwhile;
	counter = 0;
	while(counter < 8)do
		[ROOT_FILE + 8 * flag + counter]=-1;
		counter = counter + 1;
	endwhile;
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1=5;
	R3=flag;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	[retval] = 0;
	SP = userSP;
	[PROCESS_TABLE + currentPID * 16 + 9] = 0;
	ireturn;
endif;
