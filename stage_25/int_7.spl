[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;
alias userSP R6;
userSP = SP;
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 - 1;
alias retval R3;
retval = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
alias filedescriptor R4;
filedescriptor = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
if (filedescriptor == -2)then
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	multipush(R2,R3,R4,R5,R6);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call MOD_4;
	multipop(R2,R3,R4,R5,R6);
else
	if(filedescriptor > 8 || filedescriptor< 0)then
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias resource R10;
	resource = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + 496;
	if([resource + 2 * filedescriptor] != FILE)then		 
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias openfile R8;
	openfile =[resource + 2 * filedescriptor + 1];
	alias inode R7;
	inode = [OPEN_FILE_TABLE + 4 * openfile];
	if([PROCESS_TABLE + 16 * currentPID + 3] !=1 || ([PROCESS_TABLE + 16 * currentPID + 3] !=[INODE_TABLE + 16 *inode + 4] && [INODE_TABLE + 16 *inode + 5]==EXCLUSIVE))then
		[retval] = -3;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	multipush(R2,R3,R4,R5,R6,R7,R8,R10);
 	R1 = 4;
 	R3 = inode;
 	call MOD_0; 
 	multipop(R2,R3,R4,R5,R6,R7,R8,R10);
	if(R0 == -1)then
		multipush(R2,R3,R4,R5,R6,R7,R8,R10);
		R1 = 5;
 		R3 = inode;
 		call MOD_0; 
		multipop(R2,R3,R4,R5,R6,R7,R8,R10);
		[retval] = -1;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	alias lseek R9;
	lseek = (OPEN_FILE_TABLE + 4 * openfile + 2); 
	if([lseek] == MAX_FILE_SIZE) then
		multipush(R2,R3,R4,R5,R6,R7,R8,R10);
		R1 = 5;
 		R3 = inode;
 		call MOD_0; 
		multipop(R2,R3,R4,R5,R6,R7,R8,R10);
		[retval] = -2;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;	
	if([lseek]%512==0)then
		multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = 3;
 		call MOD_2; 
		multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
		if(R0 == -1)then
			multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1 = 5;
 			R3 = inode;
 			call MOD_0; 
			multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
			[retval] = -2;
			SP = userSP;
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			ireturn;
		endif;
		[INODE_TABLE + inode * 16 + 8 + ([lseek]/512)] = R0;
	endif;
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];
	alias block R10;
	block = [INODE_TABLE + inode * 16 + 8 + ([lseek]/512)];
	multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1 = 1;
	R3 = block;
	R4 = [lseek] % 512;
	R5 = word;
 	call MOD_3; 
 	multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
 	if([lseek]==[INODE_TABLE + inode * 16 +2])then
 	 	[INODE_TABLE + inode * 16 +2]=[INODE_TABLE + inode * 16 +2] + 1;
 	 	[ROOT_FILE + 8 * inode + 1] = [INODE_TABLE + inode * 16 +2];
 	 endif; 
	[lseek] = [lseek] + 1;
	multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1 = 5;
	R3 = inode;
 	call MOD_0; 
 	multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
endif;
[retval] = 0;
SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
