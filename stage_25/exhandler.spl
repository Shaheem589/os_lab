breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;
alias userSP R4;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;
backup;
multipush(EIP);
alias functionNum R1;
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];
if(EC!=0)then
	if(EC==1)then
		print("INSTRUCTION");
	endif;
	if(EC==2)then
		print("MEMORY");
	endif;
	if(EC==3)then
		print("ARITHMETIC");
	endif;
	multipush(R4);
	functionNum = 3;
	call MOD_1;
	call MOD_5;
	multipop(R4);
endif;
if( EPN >= 4 && EPN <= 7)then
	multipush(R4);
	alias diskblock R3;
	functionNum = 5;
	diskblock = [DISK_MAP_TABLE + 10 * [SYSTEM_STATUS_TABLE + 1] + EPN];
	call MOD_2;
	[PTBR + EPN * 2] = R0;
	[PTBR + EPN * 2 + 1] = "1100";
	multipop(R4);
endif;
if( EPN >= 2 && EPN <= 3)then
	multipush(R4);
	functionNum = 1;
	call MOD_2;
	[PAGE_TABLE_BASE + currentPID * 20 + 4] = R0;
	[PAGE_TABLE_BASE + currentPID * 20 + 5] = "1110";
	functionNum = 1;
	call MOD_2;
	[PAGE_TABLE_BASE + currentPID * 20 + 6] = R0;
	[PAGE_TABLE_BASE + currentPID * 20 + 7] = "1110";
	multipop(R4);
endif;
multipop(EIP);
restore;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] + 1;
alias Addr R5;
Addr = ([PTBR + 2 * ((SP)/ 512)] * 512) + (SP) % 512;
[Addr] = EIP;
ireturn;
